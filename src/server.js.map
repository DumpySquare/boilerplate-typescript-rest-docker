{"version":3,"file":"server.js","sourceRoot":"","sources":["server.ts"],"names":[],"mappings":";AAAA,MAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,MAAY,UAAU,WAAM,aAAa,CAAC,CAAA;AAE1C;IAME;QAHO,WAAM,GAAQ,IAAI,CAAC;QACnB,SAAI,GAAW,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;QAG7C,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED,MAAM;QAAQ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAE,UAAU,CAAC,UAAU,CAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAE,CAAE,CAAC;QACzE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAE,UAAU,CAAC,IAAI,CAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAE,CAAE,CAAC;QACpD,IAAI,CAAC,UAAU,EAAE,CAAC;IAEpB,CAAC;IAED,UAAU;QACR,IAAI,OAAO,GAAmB,OAAO,CAAC,MAAM,EAAE,CAAC;QAE/C,OAAO,CAAC,GAAG,CAAE,IAAI,EAAE,CAAE,GAAG,EAAE,GAAG,EAAE,IAAI;YACjC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;YACpC,IAAI,EAAE,CAAC;QACT,CAAC,CAAE,CAAC;QAEJ,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG;YAC9B,GAAG,CAAC,IAAI,CAAE,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC7B,CAAC;IAGD,KAAK;QAEH,MAAM,CAAC,IAAI,OAAO,CAAO,CAAE,OAAO,EAAE,MAAM;YACxC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAE,IAAI,CAAC,IAAI,EAAE,CAAE,GAAQ;gBAClD,EAAE,CAAC,CAAE,GAAI,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC,MAAM,CAAE,GAAG,CAAE,CAAC;gBACvB,CAAC;gBACD,OAAO,CAAC,GAAG,CAAE,uBAAuB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,CAAE,CAAC;gBACpG,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC,CAAE,CAAC;QACN,CAAC,CAAE,CAAC;IAEN,CAAC;IAED,IAAI;QACF,MAAM,CAAC,IAAI,OAAO,CAAW,CAAE,OAAO,EAAE,MAAM;YAC5C,EAAE,CAAC,CAAE,IAAI,CAAC,MAAO,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAE;oBACjB,MAAM,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC;gBACzB,CAAC,CAAE,CAAA;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC;YACzB,CAAC;QACH,CAAC,CAAE,CAAC;IACN,CAAC;AAEH,CAAC;AA3DY,cAAM,SA2DlB,CAAA","sourcesContent":["import * as express from 'express';\nimport * as bodyParser from 'body-parser';\n\nexport class Server {\n\n  public app: express.Application;\n  public server: any = null;\n  public PORT: number = process.env.PORT || 3000;\n\n  constructor() {\n    this.app = express();\n    this.config();\n  }\n\n  config() {    this.app.use( bodyParser.urlencoded( { extended: false } ) );\n    this.app.use( bodyParser.json( { limit: '1mb' } ) );\n    this.initRoutes();\n\n  }\n\n  initRoutes(): void {\n    let routers: express.Router = express.Router();\n\n    routers.get( '/*', ( req, res, next ) => {\n      console.log('url', req.originalUrl);\n      next();\n    } );\n\n    routers.get('/health', (req, res) => {\n      res.send( new Date().toJSON());\n    });\n\n    this.app.use('/', routers);\n  }\n\n\n  start(): Promise<any> {\n\n    return new Promise<any>( ( resolve, reject ) => {\n      this.server = this.app.listen( this.PORT, ( err: any ) => {\n        if ( err ) {\n          return reject( err );\n        }\n        console.log( `Listening to http://${this.server.address().address}:${this.server.address().port}` );\n        return resolve();\n      } );\n    } );\n\n  }\n\n  stop(): Promise<boolean> {\n    return new Promise<boolean>( ( resolve, reject ) => {\n      if ( this.server ) {\n        this.server.close( () => {\n          return resolve( true );\n        } )\n      } else {\n        return resolve( true );\n      }\n    } );\n  }\n\n}\n"]}